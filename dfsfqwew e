[33mcommit e269c7bf673b683b3bbf1d02d1a734fb4d1eed80[m[33m ([m[1;36mHEAD -> [m[1;32mmain[m[33m, [m[1;31morigin/main[m[33m)[m
Author: G-Delgado <gabriel.delgado1@u.icesi.edu.co>
Date:   Mon Mar 29 20:52:31 2021 -0500

    TI1 Entrega 1

[1mdiff --git a/.classpath b/.classpath[m
[1mindex 4f2c72b..fd824c6 100644[m
[1m--- a/.classpath[m
[1m+++ b/.classpath[m
[36m@@ -6,5 +6,7 @@[m
 		</attributes>[m
 	</classpathentry>[m
 	<classpathentry kind="src" path="src"/>[m
[32m+[m	[32m<classpathentry kind="src" path="test"/>[m
[32m+[m	[32m<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/5"/>[m
 	<classpathentry kind="output" path="bin"/>[m
 </classpath>[m
[1mdiff --git a/docs/PDF-TI1.pdf b/docs/PDF-TI1.pdf[m
[1mnew file mode 100644[m
[1mindex 0000000..05c3de2[m
[1m--- /dev/null[m
[1m+++ b/docs/PDF-TI1.pdf[m
[36m@@ -0,0 +1,115 @@[m
[32m+[m[32m           Tarea Integradora 1[m
[32m+[m[32m       Prof. Juan Manuel Reyes[m
[32m+[m
[32m+[m[32m                  Grupo #1[m
[32m+[m[32mGabriel Alejandro Delgado √Ålvarez[m
[32m+[m
[32m+[m[32mSantiago de Cali, Universidad Icesi[m
[32m+[m[32m                 29/03/2021[m
[32m+[m[32mTemario:[m
[32m+[m
[32m+[m[32m    ‚Ä¢ Requerimientos Funcionales[m
[32m+[m[32m    ‚Ä¢ Diagrama de clases[m
[32m+[m[32m    ‚Ä¢ Dise√±o de casos de prueba[m
[32m+[m[32mRequerimientos Funcionales:[m
[32m+[m[32mReq 1. Gestionar usuarios con nombre, direcci√≥n, tel√©fono y c√≥digo. No permitir√° que[m
[32m+[m[32mse agreguen usuarios con el mismo c√≥digo.[m
[32m+[m
[32m+[m[32m         Req 1.1 Agregar un nuevo usuario.[m
[32m+[m[32m         Req 1.2 Actualizar la informaci√≥n de usuarios existentes.[m
[32m+[m[32mReq 2. Gestionar empleados.[m
[32m+[m[32m         Req 2.1 Crear empleados con nombre, apellido y c√≥digo de identificaci√≥n.[m
[32m+[m[32m         Req 2.2 Actualizar la informaci√≥n de empleados existentes.[m
[32m+[m[32m         Req 2.3 Deshabilitar/Habilitar empleados existentes.[m
[32m+[m[32m         Req 2.4 Eliminar empleados existentes.[m
[32m+[m[32mReq 3. Gestionar clientes.[m
[32m+[m[32m         Req 3.1 Crear clientes con nombre, apellido, c√≥digo de identificaci√≥n,[m
[32m+[m[32m         direcci√≥n, n√∫mero de tel√©fono y observaciones.[m
[32m+[m[32m         Req 3.2 Actualizar la informaci√≥n de clientes existentes.[m
[32m+[m[32m         Req 3.3 Deshabilitar/Habilitar clientes existentes.[m
[32m+[m[32m         Req 3.4 Eliminar clientes existentes.[m
[32m+[m[32mReq 4. Gestionar productos.[m
[32m+[m[32m         Req 4.1 Crear productos con nombre, tama√±o, precio, tipo de producto e[m
[32m+[m[32m         ingredientes.[m
[32m+[m[32m         Req 4.2 Actualizar la informaci√≥n de productos existentes.[m
[32m+[m[32m         Req 4.3 Deshabilitar/Habilitar productos existentes.[m
[32m+[m[32m         Req 4.4 Eliminar productos existentes.[m
[32m+[m[32mReq 5. Gestionar Ingredientes.[m
[32m+[m[32m         Req 5.1 Crear ingredientes con nombre.[m
[32m+[m[32m         Req 5.2 Actualizar la informaci√≥n de ingredientes existentes.[m
[32m+[m[32m         Req 5.3 Deshabilitar/Habilitar ingredientes existentes.[m
[32m+[m[32m         Req 5.4 Eliminar ingredientes existentes.[m
[32m+[m[32mReq 6. Gestionar tipos de productos.[m
[32m+[m[32m         Req 6.1 Crear tipos de productos con nombre.[m
[32m+[m[32m         Req 6.2 Actualizar la informaci√≥n de tipos de productos existentes.[m
[32m+[m[32m         Req 6.3 Deshabilitar/Habilitar tipos de productos existentes.[m
[32m+[m[32m         Req 6.4 Eliminar tipos de productos existentes.[m
[32m+[m
[32m+[m[32mReq 7. Gestionar pedidos.[m
[32m+[m
[32m+[m[32m         Req 7.1 Crear pedidos con un c√≥digo, estado, lista de productos, cliente que lo[m
[32m+[m[32m         pide, empleado que lo entrega, fecha, hora y observaciones.[m
[32m+[m[32m         Req 7.2 Actualizar la informaci√≥n de pedidos existentes.[m
[32m+[m
[32m+[m[32m                   Req 7.2.1 Cambiar el estado de un pedido entre SOLICITADO, EN[m
[32m+[m[32m                   PROCESO, ENVIADO Y ENTREGADO o tambi√©n CANCELADO-[m
[32m+[m
[32m+[m[32m         Req 7.3 Deshabilitar/Habilitar pedidos existentes-[m
[32m+[m
[32m+[m[32m         Req 7.4 Eliminar pedidos existentes-[m
[32m+[m
[32m+[m[32mReq 8. Listar usuarios, empleados, clientes, productos, ingredientes, tipos de productos[m
[32m+[m[32my pedidos del sistema.[m
[32m+[m
[32m+[m[32mReq 9. Permitir el inicio de sesi√≥n a la aplicaci√≥n-[m
[32m+[m
[32m+[m[32mReq 10. Permitir el registrarse a la aplicaci√≥n-[m
[32m+[m
[32m+[m[32mReq 11. Permitir el cambiar la contrase√±a de un usuario con su nombre de usuario.[m
[32m+[m
[32m+[m[32mReq 12. Generar reportes en un rango de fecha y hora.[m
[32m+[m
[32m+[m[32m         Req 12.1 Generar un reporte de los pedidos con datos del nombre, direcci√≥n y[m
[32m+[m[32m         tel√©fono del cliente que lo solicit√≥, nombre del empleado que lo entrega,[m
[32m+[m[32m         estado del pedido, fecha, hora y observaciones del pedido. Adem√°s, nombre,[m
[32m+[m[32m         cantidad y valor unitario de cada producto del pedido.[m
[32m+[m
[32m+[m[32m         Req 12.2 Generar un reporte de empleados consolidando el n√∫mero de pedidos[m
[32m+[m[32m         entregados y la suma d ellos valores de dichos pedidos-[m
[32m+[m
[32m+[m[32m         Req 12.3 Generar un reporte del listado de los productos consolidando el[m
[32m+[m[32m         n√∫mero de veces que se pidi√≥ y la cantidad de dinero total que se pag√≥ por[m
[32m+[m[32m         todos los productos.[m
[32m+[m[32mDiagrama de clases:[m
[32m+[m[32m          Dise√±o de casos de prueba:[m
[32m+[m[32mObjetivo de la prueba: Validar la correcta creaci√≥n de un cliente[m
[32m+[m
[32m+[m[32mClase   M√©todo      Escenario        Valores de Entrada            Resultado[m
[32m+[m[32mClient  testClient  setupScenaryOne  String n = "Gabriel";         Se ha creado un nuevo[m
[32m+[m[32m                                     String ln = "Delgado";        cliente exitosamente.[m
[32m+[m[32m                                     String id = "sape13242";      Adem√°s, cada uno de sus[m
[32m+[m[32m                                     String us = "Mirrorbeast";    atributos concuerda con los[m
[32m+[m[32m                                     String p = "sapetas";         valores de entrada[m
[32m+[m
[32m+[m[32mObjetivo de la prueba: Validar la correcta implementaci√≥n de la lista de clientes[m
[32m+[m
[32m+[m[32mClase        M√©todo                  Escenario  Valores de Entrada                 Resultado[m
[32m+[m[32mGoldenHouse                                                                        Se ha creado[m
[32m+[m[32m             testGoldenHouseClientList setupScenaryOne ninguno                     un nuevo[m
[32m+[m[32m                                                                                   GoldenHouse[m
[32m+[m[32m                                                                                   exitosamente[m
[32m+[m[32m                                                                                   y la lista de[m
[32m+[m[32m                                                                                   clientes[m
[32m+[m[32m                                                                                   funciona[m
[32m+[m[32m                                                                                   como deber√≠a[m
[32m+[m
[32m+[m[32mObjetivo de la prueba: Validar la correcta implementaci√≥n al a√±adir un cliente[m
[32m+[m
[32m+[m[32mClase        M√©todo         Escenario        Valores de Entrada                    Resultado[m
[32m+[m[32mGoldenHouse  testAddClient  setupScenaryTwo  String n = "Felipe";                  Se ha a√±adido un[m
[32m+[m[32m                                             String ln = "Alvarado";               cliente[m
[32m+[m[32m                                             String id = "f5453r";                 exitosamente a la[m
[32m+[m[32m                                             String ad = "Calle 5 #65-57";         lista de clientes[m
[32m+[m[32m                                             String ph = "3167814343";[m
[32m+[m[32m                                             String obs = "Sapetas";[m
[32m+[m[32m[m
\ No newline at end of file[m
[1mdiff --git a/test/model/GoldenHouseTest.java b/test/model/GoldenHouseTest.java[m
[1mnew file mode 100644[m
[1mindex 0000000..85bf0c1[m
[1m--- /dev/null[m
[1m+++ b/test/model/GoldenHouseTest.java[m
[36m@@ -0,0 +1,50 @@[m
[32m+[m[32mpackage model;[m
[32m+[m
[32m+[m[32mimport org.junit.jupiter.api.Test;[m
[32m+[m[32mimport static org.junit.jupiter.api.Assertions.*;[m
[32m+[m
[32m+[m[32mpublic class GoldenHouseTest {[m
[32m+[m[41m	[m
[32m+[m	[32mprivate void setupScenaryOne() {[m
[32m+[m[41m		[m
[32m+[m	[32m}[m
[32m+[m[41m	[m
[32m+[m	[32mprivate void setupScenaryTwo() {[m
[32m+[m[41m		[m
[32m+[m	[32m}[m
[32m+[m[41m	[m
[32m+[m	[32m@Test[m
[32m+[m	[32mpublic void testGoldenHouseClientList() {[m
[32m+[m		[32msetupScenaryOne();[m
[32m+[m[41m		[m
[32m+[m		[32mGoldenHouse gh = new GoldenHouse();[m
[32m+[m[41m		[m
[32m+[m		[32massertNotNull(gh.getClients());[m
[32m+[m		[32massertTrue(gh.getClients().isEmpty());[m
[32m+[m	[32m}[m
[32m+[m[41m	[m
[32m+[m	[32m@Test[m
[32m+[m	[32mpublic void testAddClient() {[m
[32m+[m		[32msetupScenaryTwo();[m
[32m+[m[41m		[m
[32m+[m		[32mGoldenHouse gh = new GoldenHouse();[m
[32m+[m		[32mString n = "Felipe";[m
[32m+[m		[32mString ln = "Alvarado";[m
[32m+[m		[32mString id = "f5453r";[m
[32m+[m		[32mString ad = "Calle 5 #65-57";[m
[32m+[m		[32mString ph = "3167814343";[m
[32m+[m		[32mString obs = "Sapetas";[m
[32m+[m[41m			[m
[32m+[m		[32mgh.addClient(n, ln, id, ad, ph, obs);[m
[32m+[m		[32massertEquals(1, gh.getClients().size());[m
[32m+[m[41m		[m
[32m+[m		[32mClient cl = gh.getClients().get(0);[m
[32m+[m		[32massertEquals(n, cl.getName());[m
[32m+[m		[32massertEquals(ln, cl.getLastName());[m
[32m+[m		[32massertEquals(id, cl.getId());[m
[32m+[m		[32massertEquals(ad, cl.getAddress());[m
[32m+[m		[32massertEquals(ph, cl.getPhoneNumber());[m
[32m+[m		[32massertEquals(obs, cl.getObservations());[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/test/model/UserTest.java b/test/model/UserTest.java[m
[1mnew file mode 100644[m
[1mindex 0000000..60da373[m
[1m--- /dev/null[m
[1m+++ b/test/model/UserTest.java[m
[36m@@ -0,0 +1,31 @@[m
[32m+[m[32mpackage model;[m
[32m+[m
[32m+[m[32mimport org.junit.jupiter.api.Test;[m
[32m+[m[32mimport static org.junit.jupiter.api.Assertions.*;[m
[32m+[m
[32m+[m[32mpublic class UserTest {[m
[32m+[m
[32m+[m	[32mprivate void setupScenaryOne() {[m
[32m+[m[41m		[m
[32m+[m	[32m}[m
[32m+[m[41m	[m
[32m+[m	[32m@Test[m
[32m+[m	[32mpublic void testClient() {[m
[32m+[m		[32msetupScenaryOne();[m
[32m+[m[41m		[m
[32m+[m		[32mString n = "Gabriel";[m
[32m+[m		[32mString ln = "Delgado";[m
[32m+[m		[32mString id = "sape13242";[m
[32m+[m		[32mString us = "Mirrorbeast";[m
[32m+[m		[32mString p = "sapetas";[m
[32m+[m[41m		[m
[32m+[m		[32mUser user = new User(n,ln,id,us,p);[m
[32m+[m[41m		[m
[32m+[m		[32massertEquals(n, user.getName());[m
[32m+[m		[32massertEquals(ln, user.getLastName());[m
[32m+[m		[32massertEquals(id, user.getId());[m
[32m+[m		[32massertEquals(us, user.getUsername());[m
[32m+[m		[32massertEquals(p, user.getPassword());[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
